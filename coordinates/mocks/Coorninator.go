// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	coordinates "github.com/samverrall/rover-test/coordinates"
	direction "github.com/samverrall/rover-test/direction"

	mock "github.com/stretchr/testify/mock"

	plateau "github.com/samverrall/rover-test/plateau"
)

// Coorninator is an autogenerated mock type for the Coorninator type
type Coorninator struct {
	mock.Mock
}

// GetX provides a mock function with given fields:
func (_m *Coorninator) GetX() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetY provides a mock function with given fields:
func (_m *Coorninator) GetY() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Next provides a mock function with given fields: curDirection, grid
func (_m *Coorninator) Next(curDirection *direction.Direction, grid *plateau.Plateau) *coordinates.Coordinate {
	ret := _m.Called(curDirection, grid)

	var r0 *coordinates.Coordinate
	if rf, ok := ret.Get(0).(func(*direction.Direction, *plateau.Plateau) *coordinates.Coordinate); ok {
		r0 = rf(curDirection, grid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinates.Coordinate)
		}
	}

	return r0
}

type NewCoorninatorT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoorninator creates a new instance of Coorninator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoorninator(t NewCoorninatorT) *Coorninator {
	mock := &Coorninator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
